//
// Generated by Bluespec Compiler, version 2021.07 (build 4cac6eba)
//
// On Tue Apr 23 10:29:35 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_request_put                O     1 reg
// response_get                   O   512 reg
// RDY_response_get               O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// request_put                    I   512 reg
// EN_request_put                 I     1
// EN_response_get                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFFT(CLK,
	     RST_N,

	     request_put,
	     EN_request_put,
	     RDY_request_put,

	     EN_response_get,
	     response_get,
	     RDY_response_get);
  input  CLK;
  input  RST_N;

  // action method request_put
  input  [511 : 0] request_put;
  input  EN_request_put;
  output RDY_request_put;

  // actionvalue method response_get
  input  EN_response_get;
  output [511 : 0] response_get;
  output RDY_response_get;

  // signals for module outputs
  wire [511 : 0] response_get;
  wire RDY_request_put, RDY_response_get;

  // ports of submodule fft_inputFIFO
  wire [511 : 0] fft_inputFIFO_D_IN;
  wire fft_inputFIFO_CLR,
       fft_inputFIFO_DEQ,
       fft_inputFIFO_EMPTY_N,
       fft_inputFIFO_ENQ,
       fft_inputFIFO_FULL_N;

  // ports of submodule fft_outputFIFO
  wire [511 : 0] fft_outputFIFO_D_IN, fft_outputFIFO_D_OUT;
  wire fft_outputFIFO_CLR,
       fft_outputFIFO_DEQ,
       fft_outputFIFO_EMPTY_N,
       fft_outputFIFO_ENQ,
       fft_outputFIFO_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_fft_comb_fft,
       CAN_FIRE_request_put,
       CAN_FIRE_response_get,
       WILL_FIRE_RL_fft_comb_fft,
       WILL_FIRE_request_put,
       WILL_FIRE_response_get;

  // action method request_put
  assign RDY_request_put = fft_inputFIFO_FULL_N ;
  assign CAN_FIRE_request_put = fft_inputFIFO_FULL_N ;
  assign WILL_FIRE_request_put = EN_request_put ;

  // actionvalue method response_get
  assign response_get = fft_outputFIFO_D_OUT ;
  assign RDY_response_get = fft_outputFIFO_EMPTY_N ;
  assign CAN_FIRE_response_get = fft_outputFIFO_EMPTY_N ;
  assign WILL_FIRE_response_get = EN_response_get ;

  // submodule fft_inputFIFO
  FIFO2 #(.width(32'd512), .guarded(1'd1)) fft_inputFIFO(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(fft_inputFIFO_D_IN),
							 .ENQ(fft_inputFIFO_ENQ),
							 .DEQ(fft_inputFIFO_DEQ),
							 .CLR(fft_inputFIFO_CLR),
							 .D_OUT(),
							 .FULL_N(fft_inputFIFO_FULL_N),
							 .EMPTY_N(fft_inputFIFO_EMPTY_N));

  // submodule fft_outputFIFO
  FIFO2 #(.width(32'd512), .guarded(1'd1)) fft_outputFIFO(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(fft_outputFIFO_D_IN),
							  .ENQ(fft_outputFIFO_ENQ),
							  .DEQ(fft_outputFIFO_DEQ),
							  .CLR(fft_outputFIFO_CLR),
							  .D_OUT(fft_outputFIFO_D_OUT),
							  .FULL_N(fft_outputFIFO_FULL_N),
							  .EMPTY_N(fft_outputFIFO_EMPTY_N));

  // rule RL_fft_comb_fft
  assign CAN_FIRE_RL_fft_comb_fft =
	     fft_inputFIFO_EMPTY_N && fft_outputFIFO_FULL_N ;
  assign WILL_FIRE_RL_fft_comb_fft = CAN_FIRE_RL_fft_comb_fft ;

  // submodule fft_inputFIFO
  assign fft_inputFIFO_D_IN =
	     { request_put[511:448],
	       request_put[255:192],
	       request_put[383:320],
	       request_put[127:64],
	       request_put[447:384],
	       request_put[191:128],
	       request_put[319:256],
	       request_put[63:0] } ;
  assign fft_inputFIFO_ENQ = EN_request_put ;
  assign fft_inputFIFO_DEQ = CAN_FIRE_RL_fft_comb_fft ;
  assign fft_inputFIFO_CLR = 1'b0 ;

  // submodule fft_outputFIFO
  assign fft_outputFIFO_D_IN = 512'b0 /* unspecified value */  ;
  assign fft_outputFIFO_ENQ = CAN_FIRE_RL_fft_comb_fft ;
  assign fft_outputFIFO_DEQ = EN_response_get ;
  assign fft_outputFIFO_CLR = 1'b0 ;
endmodule  // mkFFT

